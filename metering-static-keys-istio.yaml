###############################################################################
# A) STATIC-KEY SECRET
###############################################################################
apiVersion: v1
kind: Secret
metadata:
  name: api-keys
  namespace: llm-d
type: Opaque
stringData:
  keys.txt: |
    # Format: API_KEY,USERNAME
    __REPLACE_WITH_KEY_DEMO__,demo
    __REPLACE_WITH_KEY_MITTENS__,mittens

---
###############################################################################
# B) AUTH-PROC DEPLOYMENT & SERVICE
###############################################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-proc
  namespace: llm-d
spec:
  replicas: 1
  selector: { matchLabels: { app: auth-proc } }
  template:
    metadata: { labels: { app: auth-proc } }
    spec:
      volumes:
        - name: api-key-vol
          secret:
            secretName: api-keys
      containers:
        - name: auth-proc
          image: ghcr.io/nerdalert/auth-extproc:latest
          env:
            - name: KEY_FILE
              value: /keys/keys.txt
          volumeMounts:
            - name: api-key-vol
              mountPath: /keys
              readOnly: true
          ports: [{ containerPort: 9000 }]
---
apiVersion: v1
kind: Service
metadata:
  name: auth-proc
  namespace: llm-d
spec:
  selector: { app: auth-proc }
  ports: [{ port: 9000, targetPort: 9000 }]

---
###############################################################################
# C) METER-PROC DEPLOYMENT & SERVICE
###############################################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meter-proc
  namespace: llm-d
spec:
  replicas: 1
  selector: { matchLabels: { app: meter-proc } }
  template:
    metadata: { labels: { app: meter-proc } }
    spec:
      containers:
        - name: meter-proc
          image: ghcr.io/nerdalert/meter-extproc:latest
          env: [{ name: MODE, value: "memory" }]
          ports: [{ containerPort: 9001 }]
---
apiVersion: v1
kind: Service
metadata:
  name: meter-proc
  namespace: llm-d
spec:
  selector: { app: meter-proc }
  ports: [{ port: 9001, targetPort: 9001 }]

---
###############################################################################
# D) ENVOYFILTER
###############################################################################
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: llmd-extproc-auth-meter
  namespace: llm-d
spec:
  workloadSelector:
    labels:
      app.kubernetes.io/component: inference-gateway
      app.kubernetes.io/gateway: llm-d-inference-gateway
  configPatches:
    # Patch 1: Insert the AUTH filter before the router.
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.ext_proc.auth # Unique name
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.ext_proc.v3.ExternalProcessor"
            failure_mode_allow: false
            processing_mode: { request_header_mode: "SEND" }
            grpc_service:
              envoy_grpc: { cluster_name: "extproc-cluster-auth" }

    # Patch 2: Insert the METER filter before the router.
    # The order of patches matters;
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.ext_proc.meter # Unique name
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.ext_proc.v3.ExternalProcessor"
            failure_mode_allow: true # Allow requests if metering fails
            processing_mode:
              request_header_mode: "SEND"
              response_header_mode: "SEND"
              response_body_mode: "BUFFERED"
            grpc_service:
              envoy_grpc: { cluster_name: "extproc-cluster-meter" }

    # Patch 3: Define the upstream clusters for the external processors.
    - applyTo: CLUSTER
      patch:
        operation: ADD
        value:
          name: "extproc-cluster-auth"
          type: LOGICAL_DNS
          connect_timeout: 2s
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: "extproc-cluster-auth"
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: auth-proc.llm-d.svc.cluster.local
                          port_value: 9000
          http2_protocol_options: {}
    - applyTo: CLUSTER
      patch:
        operation: ADD
        value:
          name: "extproc-cluster-meter"
          type: LOGICAL_DNS
          connect_timeout: 2s
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: "extproc-cluster-meter"
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: meter-proc.llm-d.svc.cluster.local
                          port_value: 9001
          http2_protocol_options: {}
